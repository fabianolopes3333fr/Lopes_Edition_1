from django.core.management.base import BaseCommand
from django.contrib.auth import get_user_model
from orcamentos.models import SolicitacaoOrcamento
from orcamentos.services import NotificationService
from orcamentos.auditoria import AuditoriaManager, TipoAcao

User = get_user_model()

class Command(BaseCommand):
    help = 'Vincular or√ßamentos √≥rf√£os a usu√°rios existentes baseado no email'

    def add_arguments(self, parser):
        parser.add_argument(
            '--dry-run',
            action='store_true',
            help='Executar sem fazer altera√ß√µes (apenas mostrar o que seria feito)',
        )
        parser.add_argument(
            '--email',
            type=str,
            help='Processar apenas um email espec√≠fico',
        )
        parser.add_argument(
            '--notify',
            action='store_true',
            help='Enviar notifica√ß√µes para usu√°rios sobre or√ßamentos vinculados',
        )

    def handle(self, *args, **options):
        dry_run = options['dry_run']
        email_especifico = options['email']
        enviar_notificacoes = options['notify']

        self.stdout.write(self.style.SUCCESS('üîç Iniciando busca por or√ßamentos √≥rf√£os...'))

        # Filtrar solicita√ß√µes √≥rf√£s
        query = SolicitacaoOrcamento.objects.filter(cliente__isnull=True)

        if email_especifico:
            query = query.filter(email_solicitante__iexact=email_especifico)
            self.stdout.write(f"üìß Processando apenas email: {email_especifico}")

        solicitacoes_orfas = query.select_related()
        total_orfas = solicitacoes_orfas.count()

        if total_orfas == 0:
            self.stdout.write(self.style.WARNING('‚ö†Ô∏è  Nenhum or√ßamento √≥rf√£o encontrado.'))
            return

        self.stdout.write(f"üìä Encontradas {total_orfas} solicita√ß√µes √≥rf√£s")

        # Processar cada solicita√ß√£o √≥rf√£
        vinculadas = 0
        usuarios_notificados = set()
        emails_processados = set()

        for solicitacao in solicitacoes_orfas:
            try:
                # Tentar encontrar usu√°rio com mesmo email
                usuarios = User.objects.filter(email__iexact=solicitacao.email_solicitante)

                if usuarios.exists():
                    usuario = usuarios.first()
                    emails_processados.add(solicitacao.email_solicitante)

                    if not dry_run:
                        # Registrar vincula√ß√£o na auditoria
                        AuditoriaManager.registrar_vinculacao_orcamento_orfao(
                            usuario=usuario,
                            solicitacao=solicitacao,
                            origem="comando_gerenciamento"
                        )

                        solicitacao.cliente = usuario
                        solicitacao.save()

                    vinculadas += 1
                    usuarios_notificados.add(usuario.email)

                    self.stdout.write(
                        self.style.SUCCESS(
                            f"‚úÖ {'[DRY-RUN] ' if dry_run else ''}Vinculada solicita√ß√£o {solicitacao.numero} "
                            f"({solicitacao.email_solicitante}) ao usu√°rio {usuario.email}"
                        )
                    )

                else:
                    self.stdout.write(
                        self.style.WARNING(
                            f"‚ö†Ô∏è  Usu√°rio n√£o encontrado para email: {solicitacao.email_solicitante} "
                            f"(Solicita√ß√£o: {solicitacao.numero})"
                        )
                    )

            except Exception as e:
                self.stdout.write(
                    self.style.ERROR(
                        f"‚ùå Erro ao processar solicita√ß√£o {solicitacao.numero}: {str(e)}"
                    )
                )

        # Registrar processamento em lote na auditoria
        if not dry_run and vinculadas > 0:
            admin_user = User.objects.filter(is_staff=True).first()
            AuditoriaManager.registrar_processamento_lote_orfaos(
                usuario_comando=admin_user,
                total_processadas=total_orfas,
                total_vinculadas=vinculadas,
                emails_processados=emails_processados
            )

        # Enviar notifica√ß√µes se solicitado
        if enviar_notificacoes and not dry_run and usuarios_notificados:
            self.stdout.write('\nüìß Enviando notifica√ß√µes...')

            for email in usuarios_notificados:
                try:
                    usuario = User.objects.get(email__iexact=email)
                    quantidade = SolicitacaoOrcamento.objects.filter(
                        cliente=usuario,
                        email_solicitante__iexact=email
                    ).count()

                    NotificationService.notificar_orcamentos_vinculados(usuario, quantidade)

                    # Registrar notifica√ß√£o na auditoria
                    AuditoriaManager.registrar_notificacao_vinculacao(
                        usuario_notificado=usuario,
                        quantidade_orcamentos=quantidade,
                        metodo_vinculacao="comando_com_notificacao"
                    )

                    self.stdout.write(
                        self.style.SUCCESS(
                            f"üì¨ Notifica√ß√£o enviada para {email} ({quantidade} or√ßamentos)"
                        )
                    )
                except Exception as e:
                    self.stdout.write(
                        self.style.ERROR(f"‚ùå Erro ao notificar {email}: {str(e)}")
                    )

        # Resumo final
        self.stdout.write('\n' + '='*50)
        self.stdout.write(self.style.SUCCESS('üìã RESUMO DA OPERA√á√ÉO:'))
        self.stdout.write(f"üîç Total de solicita√ß√µes √≥rf√£s encontradas: {total_orfas}")
        self.stdout.write(f"üîó Solicita√ß√µes vinculadas: {vinculadas}")
        self.stdout.write(f"üë• Usu√°rios √∫nicos beneficiados: {len(usuarios_notificados)}")
        self.stdout.write(f"üìß Emails processados: {len(emails_processados)}")

        if dry_run:
            self.stdout.write(self.style.WARNING('‚ö†Ô∏è  MODO DRY-RUN: Nenhuma altera√ß√£o foi feita no banco de dados'))
            self.stdout.write('üí° Execute novamente sem --dry-run para aplicar as altera√ß√µes')
        elif enviar_notificacoes:
            self.stdout.write(self.style.SUCCESS('üìß Notifica√ß√µes enviadas para todos os usu√°rios beneficiados'))

        if not dry_run:
            self.stdout.write(self.style.SUCCESS('üìù Todas as opera√ß√µes foram registradas nos logs de auditoria'))

        self.stdout.write('='*50)
