#!/usr/bin/env python
"""
Script principal para executar testes do fluxo de or√ßamentos e sistema de auditoria
Uso: python run_orcamentos_tests.py [op√ß√µes]
"""

import os
import sys
import django
import subprocess
from datetime import datetime
import json

# Configurar Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'core.settings')
django.setup()

from django.test.utils import get_runner
from django.conf import settings
from django.core.management import call_command
from orcamentos.monitor_auditoria import MonitorOrcamentos


class TestRunner:
    """Executor de testes para o sistema de or√ßamentos"""

    def __init__(self):
        self.timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
        self.relatorio_pasta = 'logs/testes'
        self.criar_diretorios()

    def criar_diretorios(self):
        """Cria diret√≥rios necess√°rios"""
        os.makedirs(self.relatorio_pasta, exist_ok=True)
        os.makedirs('logs', exist_ok=True)

    def executar_testes_fluxo(self):
        """Executa testes de fluxo de or√ßamentos"""
        print("üß™ Executando testes de fluxo de or√ßamentos...")

        # Configurar runner de testes
        TestRunner = get_runner(settings)
        test_runner = TestRunner(verbosity=2, interactive=False)

        # Executar testes espec√≠ficos do fluxo - corrigir caminho
        failures = test_runner.run_tests([
            "orcamentos.tests.test_fluxo_orcamentos.FluxoOrcamentosTestCase",
        ])

        if failures:
            print("‚ùå Alguns testes falharam!")
            return False
        else:
            print("‚úÖ Todos os testes de fluxo passaram!")
            return True

    def executar_testes_unitarios(self):
        """Executa testes unit√°rios do app orcamentos"""
        print("üî¨ Executando testes unit√°rios...")

        try:
            # Executar todos os testes do app orcamentos
            result = subprocess.run([
                sys.executable, 'manage.py', 'test', 'orcamentos',
                '--verbosity=2', '--keepdb'
            ], capture_output=True, text=True)

            if result.returncode == 0:
                print("‚úÖ Testes unit√°rios passaram!")
                return True
            else:
                print("‚ùå Testes unit√°rios falharam!")
                print(result.stdout)
                print(result.stderr)
                return False

        except Exception as e:
            print(f"‚ùå Erro ao executar testes unit√°rios: {e}")
            return False

    def validar_migra√ß√µes(self):
        """Valida se todas as migra√ß√µes est√£o aplicadas"""
        print("üìã Validando migra√ß√µes...")

        try:
            # Verificar migra√ß√µes pendentes
            result = subprocess.run([
                sys.executable, 'manage.py', 'showmigrations', '--plan'
            ], capture_output=True, text=True)

            if '[X]' in result.stdout and '[ ]' not in result.stdout:
                print("‚úÖ Todas as migra√ß√µes est√£o aplicadas!")
                return True
            else:
                print("‚ö†Ô∏è Existem migra√ß√µes pendentes!")
                print(result.stdout)
                return False

        except Exception as e:
            print(f"‚ùå Erro ao verificar migra√ß√µes: {e}")
            return False

    def executar_collectstatic(self):
        """Executa collectstatic para validar arquivos est√°ticos"""
        print("üìÅ Validando arquivos est√°ticos...")

        try:
            result = subprocess.run([
                sys.executable, 'manage.py', 'collectstatic',
                '--noinput', '--dry-run'
            ], capture_output=True, text=True)

            if result.returncode == 0:
                print("‚úÖ Arquivos est√°ticos v√°lidos!")
                return True
            else:
                print("‚ùå Problemas com arquivos est√°ticos!")
                print(result.stderr)
                return False

        except Exception as e:
            print(f"‚ùå Erro ao validar arquivos est√°ticos: {e}")
            return False

    def gerar_relatorio_auditoria(self):
        """Gera relat√≥rio de auditoria"""
        print("üìä Gerando relat√≥rio de auditoria...")

        try:
            monitor = MonitorOrcamentos()

            # Relat√≥rio di√°rio
            relatorio_diario = monitor.gerar_relatorio_diario()
            arquivo_diario = monitor.salvar_relatorio(
                relatorio_diario,
                f"auditoria_diario_{self.timestamp}.json"
            )

            # Relat√≥rio semanal
            relatorio_semanal = monitor.gerar_relatorio_semanal()
            arquivo_semanal = monitor.salvar_relatorio(
                relatorio_semanal,
                f"auditoria_semanal_{self.timestamp}.json"
            )

            print(f"‚úÖ Relat√≥rios de auditoria gerados!")
            print(f"   - Di√°rio: {arquivo_diario}")
            print(f"   - Semanal: {arquivo_semanal}")

            return True

        except Exception as e:
            print(f"‚ùå Erro ao gerar relat√≥rios de auditoria: {e}")
            return False

    def verificar_integridade_dados(self):
        """Verifica integridade dos dados"""
        print("üîç Verificando integridade dos dados...")

        try:
            from orcamentos.models import Projeto, SolicitacaoOrcamento, Orcamento

            # Verificar projetos √≥rf√£os
            projetos_sem_cliente = Projeto.objects.filter(cliente__isnull=True).count()

            # Verificar solicita√ß√µes √≥rf√£s
            solicitacoes_sem_referencia = SolicitacaoOrcamento.objects.filter(
                cliente__isnull=True,
                projeto__isnull=True
            ).count()

            # Verificar or√ßamentos sem solicita√ß√£o
            orcamentos_orfaos = Orcamento.objects.filter(solicitacao__isnull=True).count()

            problemas = []
            if projetos_sem_cliente > 0:
                problemas.append(f"{projetos_sem_cliente} projetos sem cliente")

            if solicitacoes_sem_referencia > 0:
                problemas.append(f"{solicitacoes_sem_referencia} solicita√ß√µes sem refer√™ncia")

            if orcamentos_orfaos > 0:
                problemas.append(f"{orcamentos_orfaos} or√ßamentos √≥rf√£os")

            if problemas:
                print("‚ö†Ô∏è Problemas de integridade encontrados:")
                for problema in problemas:
                    print(f"   - {problema}")
                return False
            else:
                print("‚úÖ Integridade dos dados OK!")
                return True

        except Exception as e:
            print(f"‚ùå Erro ao verificar integridade: {e}")
            return False

    def executar_linting(self):
        """Executa verifica√ß√µes de c√≥digo"""
        print("üîß Executando verifica√ß√µes de c√≥digo...")

        try:
            # Verificar se flake8 est√° dispon√≠vel
            result = subprocess.run(['flake8', '--version'],
                                  capture_output=True, text=True)

            if result.returncode != 0:
                print("‚ö†Ô∏è flake8 n√£o encontrado, pulando verifica√ß√£o de c√≥digo")
                return True

            # Executar flake8 no app orcamentos
            result = subprocess.run([
                'flake8', 'orcamentos/', '--max-line-length=100',
                '--exclude=migrations,__pycache__'
            ], capture_output=True, text=True)

            if result.returncode == 0:
                print("‚úÖ C√≥digo em conformidade com PEP8!")
                return True
            else:
                print("‚ö†Ô∏è Problemas de estilo encontrados:")
                print(result.stdout)
                return True  # N√£o falhar por problemas de estilo

        except Exception as e:
            print(f"‚ö†Ô∏è Erro ao executar linting: {e}")
            return True  # N√£o falhar se linting n√£o funcionar

    def gerar_relatorio_completo(self, resultados):
        """Gera relat√≥rio completo da execu√ß√£o"""
        relatorio = {
            'timestamp': self.timestamp,
            'data_execucao': datetime.now().isoformat(),
            'resultados': resultados,
            'resumo': {
                'total_verificacoes': len(resultados),
                'sucessos': sum(1 for r in resultados.values() if r),
                'falhas': sum(1 for r in resultados.values() if not r),
                'taxa_sucesso': sum(1 for r in resultados.values() if r) / len(resultados) * 100
            }
        }

        arquivo_relatorio = os.path.join(
            self.relatorio_pasta,
            f"relatorio_completo_{self.timestamp}.json"
        )

        with open(arquivo_relatorio, 'w', encoding='utf-8') as f:
            json.dump(relatorio, f, indent=2, ensure_ascii=False)

        print(f"\nüìã Relat√≥rio completo salvo em: {arquivo_relatorio}")
        return arquivo_relatorio

    def executar_suite_completa(self):
        """Executa suite completa de testes e verifica√ß√µes"""
        print("üöÄ Iniciando suite completa de testes do sistema de or√ßamentos")
        print("=" * 60)

        resultados = {}

        # 1. Validar migra√ß√µes
        resultados['migracoes'] = self.validar_migra√ß√µes()

        # 2. Verificar integridade dos dados
        resultados['integridade_dados'] = self.verificar_integridade_dados()

        # 3. Executar testes de fluxo
        resultados['testes_fluxo'] = self.executar_testes_fluxo()

        # 4. Executar testes unit√°rios
        resultados['testes_unitarios'] = self.executar_testes_unitarios()

        # 5. Validar arquivos est√°ticos
        resultados['arquivos_estaticos'] = self.executar_collectstatic()

        # 6. Verifica√ß√µes de c√≥digo
        resultados['linting'] = self.executar_linting()

        # 7. Gerar relat√≥rios de auditoria
        resultados['relatorio_auditoria'] = self.gerar_relatorio_auditoria()

        # Gerar relat√≥rio final
        arquivo_relatorio = self.gerar_relatorio_completo(resultados)

        # Mostrar resumo
        print("\n" + "=" * 60)
        print("üìä RESUMO DA EXECU√á√ÉO")
        print("=" * 60)

        for verificacao, sucesso in resultados.items():
            status = "‚úÖ PASSOU" if sucesso else "‚ùå FALHOU"
            print(f"{verificacao.replace('_', ' ').title()}: {status}")

        taxa_sucesso = sum(1 for r in resultados.values() if r) / len(resultados) * 100
        print(f"\nTaxa de sucesso: {taxa_sucesso:.1f}%")

        if all(resultados.values()):
            print("\nüéâ Todos os testes e verifica√ß√µes passaram!")
            return True
        else:
            print("\n‚ö†Ô∏è Algumas verifica√ß√µes falharam. Verifique os logs acima.")
            return False


def main():
    """Fun√ß√£o principal"""
    import argparse

    parser = argparse.ArgumentParser(description='Executor de testes do sistema de or√ßamentos')
    parser.add_argument('--fluxo', action='store_true',
                        help='Executar apenas testes de fluxo')
    parser.add_argument('--unitarios', action='store_true',
                        help='Executar apenas testes unit√°rios')
    parser.add_argument('--auditoria', action='store_true',
                        help='Gerar apenas relat√≥rios de auditoria')
    parser.add_argument('--integridade', action='store_true',
                        help='Verificar apenas integridade dos dados')
    parser.add_argument('--completo', action='store_true',
                        help='Executar suite completa (padr√£o)')

    args = parser.parse_args()

    runner = TestRunner()

    try:
        if args.fluxo:
            success = runner.executar_testes_fluxo()
        elif args.unitarios:
            success = runner.executar_testes_unitarios()
        elif args.auditoria:
            success = runner.gerar_relatorio_auditoria()
        elif args.integridade:
            success = runner.verificar_integridade_dados()
        else:
            # Executar suite completa por padr√£o
            success = runner.executar_suite_completa()

        sys.exit(0 if success else 1)

    except KeyboardInterrupt:
        print("\n‚ö†Ô∏è Execu√ß√£o interrompida pelo usu√°rio")
        sys.exit(1)
    except Exception as e:
        print(f"\n‚ùå Erro inesperado: {e}")
        sys.exit(1)


if __name__ == '__main__':
    main()
